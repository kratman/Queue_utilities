#!/usr/bin/env python

###############################################################################
# A simple program to produce a constantly updating queue t.o.p.              #
# This is a simplified and specialized version of pbstop                      #
###############################################################################

#NB: Python 2.7 or higher is required.

#Usage: Qtop -q [ queue name ]
#Usage: Qtop -u [ username ]
#Usage: Qtop -r [ username ]

### Import modules ###
import subprocess
import select
import sys
import os
import re

### Color settings ###
class ClrSet:
  #Unicode colors
  Norm = '\033[0m'
  Red = '\033[91m'
  Bold = '\033[1m'
  Green = '\033[92m'
  Blue = '\033[94m'
  Cyan = '\033[36m'
  #Set colors
  Help = Red #Color for help output
  Queue = Blue #Color the queue name
  User = Bold+Green #Options for the current user
  Group = Cyan #Options for the people in ${QtopUserNames}
  Reset = Norm #Reset to defaults

### Find current users ID ###
MyUName = subprocess.check_output('whoami')
MyUName = MyUName.strip()

### Read list of usernames from the file defined in ${QtopUserNames} ###
QtopUserFile = subprocess.check_output("echo ${QtopUserNames}",shell=True)
QtopUserFile = QtopUserFile.strip()
UserList = []
ServerTag = ""
if (len(QtopUserFile) > 1):
  if (os.path.isfile(QtopUserFile)):
    ifile = open(QtopUserFile,"r")
    dummy = ifile.readlines()
    for i in range(len(dummy)):
      dummy[i] = dummy[i].split()
      if (dummy[i][0] == "Server:"):
        #Sanitize the server tag
        ServerTag = re.escape(dummy[i][1])
      else:
        UserList.append(dummy[i])

### Resize the usernames ###
for pair in UserList:
  if (len(pair[0]) < len(pair[1])):
    #Make username longer
    diff = len(pair[1])-len(pair[0])
    for i in range(diff):
      pair[0] += " "
  if (len(pair[0]) > len(pair[1])):
    #Make real name longer
    diff = len(pair[0])-len(pair[1])
    for i in range(diff):
      pair[1] += " "
  if (pair[0].strip() == MyUName):
    pair[1] = ClrSet.User+pair[1]+ClrSet.Reset
  else:
    pair[1] = ClrSet.Group+pair[1]+ClrSet.Reset

### Read arguments ###
RunType = ""
if (len(sys.argv) == 2):
  RunArgs = sys.argv[1]
  if ((RunArgs == "-h") or (RunArgs == "--help")):
    RunType = "hlp"
if (len(sys.argv) == 3):
  RunArgs = sys.argv[1]
  if ((RunArgs[0] == "-") and (RunArgs[1] == "h")):
    RunType = "hlp"
  if ((RunArgs[0] == "-") and (RunArgs[1] == "u")):
    RunType = "usr"
  if ((RunArgs[0] == "-") and (RunArgs[1] == "r")):
    RunType = "run"
  if ((RunArgs[0] == "-") and (RunArgs[1] == "q")):
    RunType = "que"
  RunArgs = sys.argv[2]
  if ((RunType == "usr") or (RunType == "run")):
    QtopUser = RunArgs
    QtopUser = QtopUser.strip()
    if (RunArgs == "me"):
      QtopUser = subprocess.check_output('whoami')
      QtopUser = QtopUser.strip()
  if (RunType == "que"):
    #Read and sanitize the queue name
    QueName = re.escape(RunArgs)

### Print help info and exit ###
if (RunType == "hlp"):
  print(ClrSet.Help)
  print("A simple program to produce a constantly updating queue t.o.p.")
  print("")
  print("Usage: Qtop -q [ queue name ]")
  print("Usage: Qtop -r [ username ]")
  print("Usage: Qtop -u [ username ]")
  print("Usage: Qtop -u me")
  print("")
  print("")
  print("  -q  Show active and queued jobs for a queue")
  print("")
  print("  -u  Show active and queued jobs for a user. Jobs for the")
  print("      current user can be shown with the '-u me' command.")
  print("")
  print("  -r  Show only active jobs for a user.")
  print("")
  print("Pressing enter refreshes the output.")
  print("")
  print("Qtop runs until the user presses 'q' then enter.")
  print("")
  print("Note: Behavior can be terminal dependent.")
  print(ClrSet.Reset)
  exit()

### Semi-infinite user loop ###
if ((RunType == "usr") or (RunType == "run")):
  while (True):
    #Clear the screen
    #NB: Several different types are included since the commands
    #are terminal dependent
    subprocess.call('clear') #Only prints blank lines (fallback)
    subprocess.call('reset') #Gnome terminal, xterm
    subprocess.call(['echo','-en','\e[3J']) #Konsole, xterm
    subprocess.call('clear') #A second clear fixes a smartphone bug
    #Print title
    line = '\n'
    if (RunType == "usr"):
      line += "Active and queued "
    if (RunType == "run"):
      line += "Active "
    line += "jobs for user "
    line += ClrSet.Queue+QtopUser+ClrSet.Reset
    line += '\n'
    #Print qstat titles that will be lost
    line += "                                    "
    line += "                  Req'd  Req'd   Elap"
    line += '\n'
    line += "Job ID    Username Queue    Jobname "
    line += "   SessID NDS TSK Memory Time  S Time"
    line += '\n'
    line += "--------- -------- -------- --------"
    line += "-- ------ --- --- ------ ----- - -----"
    #Flush output
    print(line)
    #Call qstat
    jobcmd = "qstat -u "
    jobcmd += QtopUser
    jobcmd += " | grep -e "
    jobcmd += QtopUser
    JobOut = subprocess.check_output(jobcmd,shell=True)
    JobOut = JobOut.strip() #Remove white space
    JobOut = JobOut.split('\n') #Split lines
    #Replace names
    for line in JobOut:
      line = line.strip()
      for i in range(len(UserList)):
        line = re.sub((r''+ServerTag),(r''),line)
        line = re.sub((r''+UserList[i][0]),(r''+UserList[i][1]),line)
      print(line)
    #Check for quit commad every 30 seconds
    (o1,o2,o3) = select.select([sys.stdin],[],[],30)
    if (o1):
      #Read typed text
      quitline = sys.stdin.readline().strip()
      for letter in quitline:
        if (letter == "q"):
          exit()

### Semi-infinite queue loop ###
if (RunType == "que"):
  while (True):
    #Clear the screen
    #NB: Several different types are included since the commands
    #are terminal dependent
    subprocess.call('clear') #Only prints blank lines (fallback)
    subprocess.call('reset') #Gnome terminal, xterm
    subprocess.call(['echo','-en','\e[3J']) #Konsole, xterm
    subprocess.call('clear') #A second clear fixes a smartphone bug
    #Print qstat information for the queue
    print("")
    jobcmd = "qstat -Q "
    jobcmd += QueName
    line = subprocess.check_output(jobcmd,shell=True)
    #Print title
    line += '\n'
    line += "Active and queued jobs on "
    line += ClrSet.Queue+QueName+ClrSet.Reset
    line += '\n'
    #Print qstat titles that will be lost
    line += "                                    "
    line += "                  Req'd  Req'd   Elap"
    line += '\n'
    line += "Job ID    Username Queue    Jobname "
    line += "   SessID NDS TSK Memory Time  S Time"
    line += '\n'
    line += "--------- -------- -------- --------"
    line += "-- ------ --- --- ------ ----- - -----"
    #Flush output
    print(line)
    #Call qstat
    jobcmd = "qstat -a | grep -e "
    jobcmd += QueName
    JobOut = subprocess.check_output(jobcmd,shell=True)
    JobOut = JobOut.strip() #Remove white space
    JobOut = JobOut.split('\n') #Split lines
    #Replace names
    for line in JobOut:
      line = line.strip()
      for i in range(len(UserList)):
        line = re.sub((r''+ServerTag),(r''),line)
        line = re.sub((r''+UserList[i][0]),(r''+UserList[i][1]),line)
      print(line)
    #Check for quit commad every 30 seconds
    (o1,o2,o3) = select.select([sys.stdin],[],[],30)
    if (o1):
      #Read typed text
      quitline = sys.stdin.readline().strip()
      for letter in quitline:
        if (letter == "q"):
          exit()

### Exit if no valid input was found ###
print("")
print("Usage: Qtop -q [ queue name ]")
print("Usage: Qtop -u [ username name ]")
print("Usage: Qtop -r [ username name ]")
print("")
print("Use -h for more detailed help.")
print("")
exit()
